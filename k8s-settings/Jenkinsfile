def serv = 'ucm-api-serv'
def pfom = 'ucm-odr-pfom'
def oper = 'ucm-vuc-oper'
def web = 'ucm-web'
def pcrEndPoint = env.BRANCH_NAME == 'main' ? 'avobxiry.private-ncr.gov-ntruss.com' : 'pqf1vv9m.private-ncr.gov-ntruss.com'
def agentYaml = env.BRANCH_NAME == 'main' ? 'Jenkins-k8s-main.yaml' : 'Jenkins-k8s-develop.yaml'
def baseWasImage = env.BRANCH_NAME == 'main' ? 'prd-was-base' : 'dev-was-base'
def baseWebImage = env.BRANCH_NAME == 'main' ? 'prd-web-base' : 'dev-web-image'
def activeModuleArray = []
def activeModules
def ciRefTag

pipeline {
    agent {
         kubernetes {
              defaultContainer 'jnlp'
              yamlFile "${agentYaml}"
         }
    }

    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }

    parameters {
        booleanParam (
                defaultValue: false,
                description: "deploy ${serv}",
                name: 'SERV'
        )
        booleanParam (
                defaultValue: false,
                description: "deploy ${pfom}",
                name: 'PFOM'
        )
        booleanParam (
                defaultValue: false,
                description: "deploy ${oper}",
                name: 'OPER'
        )
    }

    stages {
        stage('validate params') {
            steps {
                script {
                    checkout scm
                    if (params.SERV) activeModuleArray.add(serv)
                    if (params.PFOM) activeModuleArray.add(pfom)
                    if (params.OPER) activeModuleArray.add(oper)
                    if (activeModuleArray.isEmpty()) 'error no bulid parameters. choose at least 1 build parameter. process abort'
                    activeModules = activeModuleArray.join(",")
                    ciRefTag = env.BRANCH_NAME + "-" + sh(script: "printf \$(git rev-parse --short HEAD)", returnStdout: true)
                }
            }
        }

        stage('warm up') {
            steps {
                container('kaniko-warmer') {
                    sh """
                        /kaniko/warmer \
                        --cache-dir=/cache \
                        --image=${pcrEndPoint}/${baseWebImage}:latest \
                        --image=${pcrEndPoint}/${baseWasImage}:latest \
                        """
                }
            }
        }

        stage('build') {
            steps {
                container('maven') {
                    sh "mvn -gs ./settings_server.xml clean package -pl ${activeModules} -am"
                }
            }
        }

        stage('[image]') {
            parallel {
                stage('serv') {
                    when {
                        expression { params.SERV }
                    }
                    steps {
                        container('kaniko-c0') {
                            print "build ${serv} was image..."
                            sh """
                                /kaniko/executor \
                                --dockerfile `pwd`/Dockerfile-was \
                                --context `pwd` \
                                --cache=true \
                                --build-arg BASE_IMAGE="${pcrEndPoint}/${baseWasImage}:latest" \
                                --build-arg COPY_TARGET="${serv}/target/${serv}.war" \
                                --destination "${pcrEndPoint}/${serv}:${ciRefTag}" \
                                --destination "${pcrEndPoint}/${serv}:latest"
                                """
                        }
                    }
                }

                stage('pfom') {
                    when {
                        expression { params.PFOM }
                    }
                    steps {
                        container('kaniko-c1') {
                            script {
                                if (! params.OPER) { // build per 1 image create for web
                                    print "build web image..."
                                    sh """
                                    /kaniko/executor \
                                    --dockerfile `pwd`/Dockerfile-web \
                                    --context `pwd` \
                                    --cache=true \
                                    --build-arg BASE_IMAGE="${pcrEndPoint}/${baseWebImage}:latest" \
                                    --destination "${pcrEndPoint}/${web}:${ciRefTag}" \
                                    --destination "${pcrEndPoint}/${web}:latest"
                                    """
                                }
                                print "build ${pfom} was image..."
                                sh """
                                    /kaniko/executor \
                                    --dockerfile `pwd`/Dockerfile-was \
                                    --context `pwd` \
                                    --cache=true \
                                    --build-arg BASE_IMAGE="${pcrEndPoint}/${baseWasImage}:latest" \
                                    --build-arg COPY_TARGET="${pfom}/target/${pfom}.war" \
                                    --destination "${pcrEndPoint}/${pfom}:${ciRefTag}" \
                                    --destination "${pcrEndPoint}/${pfom}:latest"
                                    """
                            }
                        }
                    }
                }

                stage('oper') {
                    when {
                        expression { params.OPER }
                    }
                    steps {
                        container('kaniko-c2') {
                            print "build web image..."
                            sh """
                                /kaniko/executor \
                                --dockerfile `pwd`/Dockerfile-web \
                                --context `pwd` \
                                --cache=true \
                                --build-arg BASE_IMAGE="${pcrEndPoint}/${baseWebImage}:latest" \
                                --destination "${pcrEndPoint}/${web}:${ciRefTag}" \
                                --destination "${pcrEndPoint}/${web}:latest"
                                """

                            print "build ${oper} was image..."
                            sh """
                                /kaniko/executor \
                                --dockerfile `pwd`/Dockerfile-was \
                                --context `pwd` \
                                --cache=true \
                                --build-arg BASE_IMAGE="${pcrEndPoint}/${baseWasImage}:latest" \
                                --build-arg COPY_TARGET="${oper}/target/${oper}.war" \
                                --destination "${pcrEndPoint}/${oper}:${ciRefTag}" \
                                --destination "${pcrEndPoint}/${oper}:latest"
                                """
                        }
                    }
                }
            }
        }

        stage('[deploy]') {
            parallel {
                stage('serv') {
                    when {
                        expression { params.SERV }
                    }
                    steps {
                        container('kubectl') {
                            sh "kubectl set image statefulset/${serv} ${serv}=${pcrEndPoint}/${serv}:${ciRefTag} -n was"
                        }
                    }
                }

                stage('pfom') {
                    when {
                        expression { params.PFOM }
                    }
                    steps {
                        container('kubectl') {
                            script {
                                if (! params.OPER) { // build per 1 image deploy for web
                                    sh "kubectl set image statefulset/apache-app httpd=${pcrEndPoint}/${web}:${ciRefTag} -n web"
                                }
                            }
                            sh "kubectl set image statefulset/${pfom} ${pfom}=${pcrEndPoint}/${pfom}:${ciRefTag} -n was"
                        }
                    }
                }

                stage('oper') {
                    when {
                        expression { params.OPER }
                    }
                    steps {
                        container('kubectl') {
                            sh "kubectl set image statefulset/apache-app httpd=${pcrEndPoint}/${web}:${ciRefTag} -n web"
                            sh "kubectl set image statefulset/${oper} ${oper}=${pcrEndPoint}/${oper}:${ciRefTag} -n was"
                        }
                    }
                }
            }
        }

    }
}
