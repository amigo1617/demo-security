def serv = 'ucm-api-serv'
def pfom = 'ucm-odr-pfom'
def oper = 'ucm-vuc-oper'
def pcrEndPoint = 'pqf1vv9m.private-ncr.gov-ntruss.com'
def agentYaml = env.BRANCH_NAME == 'main' ? 'Jenkins-k8s-main.yaml' : 'Jenkins-k8s-develop.yaml'
def baseImageName = env.BRANCH_NAME == 'main' ? 'prd-was-base' : 'dev-was-base'
def activeModuleArray = []
def activeModules
def ciRefTag


pipeline {

    agent {
         kubernetes {
              defaultContainer 'jnlp'
              yamlFile "${agentYaml}"
         }
    }

    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }

    parameters {
        booleanParam (
                defaultValue: false,
                description: "deploy ${serv}",
                name: 'SERV'
        )
        booleanParam (
                defaultValue: false,
                description: "deploy ${pfom}",
                name: 'PFOM'
        )
        booleanParam (
                defaultValue: false,
                description: "deploy ${oper}",
                name: 'OPER'
        )
    }

    stages {

        stage('validate params') {
            steps {
                script {
                    checkout scm
                    if (params.SERV) activeModuleArray.add(serv)
                    if (params.PFOM) activeModuleArray.add(pfom)
                    if (params.OPER) activeModuleArray.add(oper)
                    activeModules = activeModuleArray.join(",")
                    if (activeModules.size() == 0) 'error no bulid parameters. choose at least 1 build parameter. process abort'
                    ciRefTag = env.BRANCH_NAME + "-" + sh(script: "printf \$(git rev-parse --short HEAD)", returnStdout: true)
                }
            }
        }

        stage('warm up') {
            steps {
                container('kaniko-warmer') {
                    sh """
                        /kaniko/warmer \
                        --cache-dir=/cache \
                        --image=${pcrEndPoint}/dev-was-base:latest \
                        """
                }
            }
        }

        stage('build') {
            steps {
                container('maven') {
                    sh "mvn -gs ./settings_server.xml clean package -pl ${activeModules} -am"
                }
            }
        }

        stage('[image]') {
            parallel {
                stage('serv') {
                    when {
                        expression { params.SERV }
                    }
                    steps {
                        container('kaniko-c0') {
                            script {
                                sh """
                                    /kaniko/executor \
                                    --dockerfile `pwd`/Dockerfile \
                                    --context `pwd` \
                                    --cache=true \
                                    --build-arg WAR_PATH="${serv}/target/${serv}" \
                                    --build-arg BASE_IMAGE="${pcrEndPoint}/${baseImageName}:latest" \
                                    --destination "${pcrEndPoint}/${serv}:${ciRefTag}" \
                                    --destination "${pcrEndPoint}/${serv}:latest" 
                                    """
                            }
                        }
                    }
                }

                stage('pfom') {
                    when {
                        expression { params.PFOM }
                    }
                    steps {
                        container('kaniko-c1') {
                            script {
                                sh """
                                    /kaniko/executor \
                                    --dockerfile `pwd`/Dockerfile \
                                    --context `pwd` \
                                    --cache=true \
                                    --build-arg WAR_PATH="${pfom}/target/${pfom}" \
                                    --build-arg BASE_IMAGE="${pcrEndPoint}/${baseImageName}:latest" \
                                    --destination "${pcrEndPoint}/${pfom}:${ciRefTag}" \
                                    --destination "${pcrEndPoint}/${pfom}:latest" 
                                    """
                            }
                        }
                    }
                }

                stage('oper') {
                    when {
                        expression { params.OPER }
                    }
                    steps {
                        container('kaniko-c2') {
                            script {
                                sh """
                                    /kaniko/executor \
                                    --verbosity debug \
                                    --dockerfile `pwd`/Dockerfile \
                                    --context `pwd` \
                                    --cache=true \
                                    --build-arg WAR_PATH="${oper}/target/${oper}" \
                                    --build-arg BASE_IMAGE="${pcrEndPoint}/${baseImageName}:latest" \
                                    --destination "${pcrEndPoint}/${oper}:${ciRefTag}" \
                                    --destination "${pcrEndPoint}/${oper}:latest" 
                                    """
                            }
                        }
                    }
                }
            }
        }

        stage('[deploy]') {
            parallel {
                stage('serv') {
                    when {
                        expression { params.SERV }
                    }
                    steps {
                        container('kubectl') {
                            echo " done "
                        }
                    }
                }

                stage('pfom') {
                    when {
                        expression { params.PFOM }
                    }
                    steps {
                        container('kubectl') {
                            echo " done "
                        }
                    }
                }

                stage('oper') {
                    when {
                        expression { params.OPER }
                    }
                    steps {
                        container('kubectl') {                             
                            script {
                                if (env.BRANCH_NAME == 'main') {
                                    withKubeConfig([credentialsId: 'prod_cred']) {
                                        //sh "kubectl set image StatefulSet/${oper} ${oper}=${pcr}/${oper}:${ciRefTag} -n ${targetNs} --record"
                                    }
                                } else {
                                    echo " done "
                                    //sh "kubectl set image StatefulSet/${oper} ${oper}=${pcr}/${oper}:${ciRefTag} -n was --record"
                                }
                            }
                        }
                    }
                }
            }
        }

    }
}